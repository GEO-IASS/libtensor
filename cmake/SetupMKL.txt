macro(SetupMKL)

    add_definitions(-DUSE_MKL)
    include_directories(${MKL_INCLUDE_PATH})
    set(BLAS_LIBS ${MKL_LIBRARIES})
    message(STATUS "Using MKL: " ${MKL_INCLUDE_PATH})

    set(CMAKE_REQUIRED_INCLUDES ${MKL_INCLUDE_PATH})
    set(CMAKE_REQUIRED_LIBRARIES ${MKL_LIBRARIES})

    check_cxx_source_compiles("
#include <mkl.h>
int main() {
  double a[10], b[20], c[10]; vdAdd(10, a, b, c);
  return 0;
}
" HAVE_MKL_VDADD)
    if(HAVE_MKL_VDADD)
        add_definitions(-DHAVE_MKL_VDADD)
    endif(HAVE_MKL_VDADD)

    check_cxx_source_compiles("
#include <mkl.h>
int main() {
  double *ptr = (double*)MKL_malloc(64, 32); MKL_free(ptr);
  return 0;
}
" HAVE_MKL_MALLOC)
    if(HAVE_MKL_MALLOC)
        add_definitions(-DHAVE_MKL_MALLOC)
    endif(HAVE_MKL_MALLOC)

    check_cxx_source_compiles("
#include <mkl.h>
#include <mkl_trans.h>
int main() {
  double a[9], b[9];
  mkl_domatcopy('C', 'N', 3, 3, 1.0, a, 3, b, 3);
  return 0;
}
" HAVE_MKL_DOMATCOPY)
    if(HAVE_MKL_DOMATCOPY)
        add_definitions(-DHAVE_MKL_DOMATCOPY)
    endif(HAVE_MKL_DOMATCOPY)

    check_cxx_source_compiles("
#include <mkl_lapack.h>
int main() {
  double a[9], work[9], tol = 0.0;
  int n = 3, lda = 3, rank, info;
  int piv[3];
  char uplo = 'U';
  dpstrf(&uplo, &n, a, &lda, piv, &rank, &tol, work, &info);
  return 0;
}
" HAVE_LAPACK_DPSTRF)
    if(HAVE_LAPACK_DPSTRF)
        add_definitions(-DHAVE_LAPACK_DPSTRF)
    endif(HAVE_LAPACK_DPSTRF)

endmacro(SetupMKL)
